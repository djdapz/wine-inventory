buildscript {

    ext.kotlin_version = "1.4.21"
    ext.spring_boot_version = '2.4.3'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.21'
    id 'org.springframework.boot' version '2.4.1'
    id "org.jetbrains.kotlin.plugin.allopen" version "1.4.21"
    id "org.jetbrains.kotlin.plugin.spring" version "1.4.21"
}


//apply plugin: 'kotlin'
//apply plugin: 'java'
//apply plugin: "kotlin-spring"
//apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

static def determineVersion() {
    if (System.env.BUILD_VERSION == null) {
        return "NO_VERSION"
    }

    return "$System.env.BUILD_VERSION"
}

archivesBaseName = "wine-inventory"
version = determineVersion()

repositories {
    jcenter()
}

dependencies {

    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
    compile("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.7")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.7")
    compile("com.fasterxml.jackson.core:jackson-core:2.9.7")
    compile("org.flywaydb:flyway-core:5.2.1")

    compile("org.postgresql:postgresql:42.2.5")
    compile("org.springframework.boot:spring-boot-starter-jdbc:$spring_boot_version")
    compile("org.springframework.boot:spring-boot-starter-webflux:$spring_boot_version")

    testCompile("com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0")
    testCompile("io.rest-assured:rest-assured:3.2.0")
    testCompile("org.jetbrains.kotlin:kotlin-test")
    testCompile("org.jetbrains.kotlin:kotlin-test-junit")
    testCompile("com.github.javafaker:javafaker:0.14")
    testCompile("org.skyscreamer:jsonassert:1.5.0")
    testCompile("org.springframework.boot:spring-boot-starter-test:$spring_boot_version")
}

test {
    testLogging {
        // set options for log level LIFECYCLE
        events "started", "skipped", "failed"
        exceptionFormat "short"
        showCauses true
        exceptionFormat "full"
        // set options for log level DEBUG
        //noinspection GroovyAssignabilityCheck
        debug {
            events "started", "skipped", "failed"
        }

        // remove standard output/error logging from --info builds
        // by assigning only 'failed' and 'skipped' events
        info.events = ["failed", "skipped"]
    }
}

task buildFrontend(type: Exec) {
    workingDir './frontend'
    commandLine 'npm', 'run', 'build'
}

task cleanFrontend(type: Exec) {
    workingDir './src/main/resources'
    commandLine 'rm', '-rf', 'public'
}

task copyFrontend(type: Copy) {
    from "$buildDir/../frontend/build"
    into "./src/main/resources/public"
}

copyFrontend.dependsOn buildFrontend
copyFrontend.dependsOn cleanFrontend
jar.dependsOn copyFrontend

processResources.shouldRunAfter copyFrontend