---
resources:

- name: repo
  type: git
  source:
    uri: ((git-repo))
    private_key: ((github-private-key))

- name: openjdk
  type: docker-image
  source:
    repository: openjdk
    tag: 8

- name: postgres
  type: docker-image
  source:
    repository: postgres

- name: cypress-image
  type: docker-image
  source:
    repository: cypress/browsers
    tag: chrome67

- name: dcind
  type: docker-image
  source:
    repository: amidos/dcind

- name: openjdk-node-cf
  type: docker-image
  source:
    repository: djdapz/openjdk-node-cf

- name: acceptance
  type: cf
  source:
    api: https://api.run.pivotal.io
    username: ((PCF_USERNAME))
    password: ((PCF_PASSWORD))
    organization: dapuzzo
    space: development

- name: production
  type: cf
  source:
    api: https://api.run.pivotal.io
    username: ((PCF_USERNAME))
    password: ((PCF_PASSWORD))
    organization: dapuzzo
    space: production

- name: version
  type: semver
  source:
    driver: git
    uri: git@github.com:djdapz/wine-inventory.git
    branch: version
    file: version
    private_key: ((github-private-key))

- name: frontend-s3
  type: s3
  source:
    region_name: us-west-2
    bucket: wine-inventory
    regexp: app/frontend-(.*).zip
    access_key_id: ((AWS_ACCESS_KEY_ID))
    secret_access_key: ((AWS_SECRET_ACCESS_KEY))

- name: backend-s3
  type: s3
  source:
    region_name: us-west-2
    bucket: wine-inventory
    regexp: app/wine-inventory-(.*).jar
    access_key_id: ((AWS_ACCESS_KEY_ID))
    secret_access_key: ((AWS_SECRET_ACCESS_KEY))

jobs:

- name: run-tests-backend
  public: true
  plan:
    - get: version
    - get: repo
      trigger: true
    - get: openjdk
      params: {save: true}
    - get: postgres
      params: {save: true}
    - get: dcind
      params: {save: true}
    - task: run-tests
      privileged: true
      image: dcind
      config:
        platform: linux
        inputs:
          - name: repo
          - name: postgres
          - name: openjdk
        run:
          path: sh
          args:
          - -exc
          - |
            set -e
            source /docker-lib.sh

            start_docker

            docker load -i postgres/image
            docker tag "$(cat postgres/image-id)" "$(cat postgres/repository):$(cat postgres/tag)"

            docker load -i openjdk/image
            docker tag "$(cat openjdk/image-id)" "$(cat openjdk/repository):$(cat openjdk/tag)"


            docker images

            docker-compose -f repo/ci/docker-compose.tests.yml run unit-integration-tests

            docker-compose -f repo/ci/docker-compose.tests.yml down
            docker volume rm $(docker volume ls -q)

- name: run-tests-frontend
  public: true
  plan:
    - get: version
    - get: repo
      trigger: true
    - get: cypress-image
      params: {save: true}
    - task: run-tests
      privileged: true
      image: cypress-image
      config:
        platform: linux
        inputs:
          - name: repo
        caches:
          - path: repo/frontend/node_modules
          - path: ../../../root/.cache
        run:
          path: sh
          args:
            - -exc
            - |
              set -e
              cd repo/frontend
              npm i
              npm run test:ci

- name: bump-version
  public: true
  plan:
    - get: repo
      passed: ["run-tests-backend", "run-tests-frontend"]
    - get: version
      passed: ["run-tests-backend", "run-tests-frontend"]
      trigger: true
    - put: version
      params: {bump: patch}

- name: build-and-upload-frontend
  public: true
  plan:
    - get: version
      trigger: true
      passed: ["bump-version"]
    - get: repo
      trigger: true
      passed: ["bump-version"]
    - get: openjdk-node-cf
      params: {save: true}
    - task: build-and-upload
      privileged: true
      image: openjdk-node-cf
      config:
        platform: linux
        inputs:
          - name: repo
          - name: version
        outputs:
          - name: frontend-s3
        caches:
          - path: repo/frontend/node_modules
          - path: ../../../root/.cache
        run:
          path: sh
          args:
            - -exc
            - |
              #!/bin/bash

              set -ex

              export BUILD_VERSION=`cat version/number`

              cd repo/frontend
              npm install
              npm run build

              touch build/Staticfile
              cd build
              zip -r ../../../frontend-s3/frontend-${BUILD_VERSION}.zip *
    - put: frontend-s3
      params:
        file: frontend-s3/frontend-*.zip


- name: build-and-upload-backend
  public: true
  plan:
    - get: version
      trigger: true
      passed: ["bump-version"]
    - get: repo
      trigger: true
      passed: ["bump-version"]
    - get: openjdk-node-cf
      params: {save: true}
    - task: build-and-upload
      privileged: true
      image: openjdk-node-cf
      config:
        platform: linux
        inputs:
          - name: repo
          - name: version
        outputs:
          - name: backend-s3
        caches:
          - path: gradle
        run:
          path: sh
          args:
          - -exc
          - |
            #!/bin/bash

            set -ex

            ./repo/ci/tasks/cache_gradle.sh

            export BUILD_VERSION=`cat version/number`

            cd repo
            ./gradlew clean assemble -Pversion=$BUILD_VERSION

            cp "build/libs/wine-inventory-${BUILD_VERSION}.jar" "../backend-s3/wine-inventory-${BUILD_VERSION}.jar"
    - put: backend-s3
      params:
        file: backend-s3/wine-inventory-*.jar

- name: deploy-acceptance
  plan:
  - get: openjdk-node-cf
    params: {save: true}
  - in_parallel:
    - get: backend-s3
      trigger: true
      passed: ['build-and-upload-backend']
    - get: frontend-s3
      trigger: true
      passed: ['build-and-upload-frontend']
    - get: repo
      trigger: true
      passed: ['build-and-upload-backend', 'build-and-upload-frontend']
  - task: send-to-cf
    privileged: true
    image: openjdk-node-cf
    config:
      platform: linux
      inputs:
      - name: repo
      - name: frontend-s3
      - name: backend-s3
      outputs:
      - name: deploy
      run:
        path: sh
        args:
        - -exc
        - |
          #!/bin/bash

          set -ex

          cp  backend-s3/wine-inventory-*.jar  ./deploy/backend.jar
          cp ./repo/ci/manifests/acceptance/mainfest-backend.yml ./deploy/manifest-backend.yml

          cp  frontend-s3/frontend-*.zip  ./deploy/frontend.zip
          cp ./repo/ci/manifests/acceptance/mainfest-frontend.yml ./deploy/manifest-frontend.yml

  - in_parallel:
    - put: acceptance
      params:
        inputs:
        - name: deploy
        path: deploy/backend.jar
        manifest: deploy/manifest-backend.yml
    - put: acceptance
      params:
        inputs:
        - name: deploy
        path: deploy/frontend.zip
        manifest: deploy/manifest-frontend.yml

- name: deploy-production
  plan:
    - get: openjdk-node-cf
      params: {save: true}
    - in_parallel:
        - get: backend-s3
          passed: ['deploy-acceptance']
        - get: frontend-s3
          passed: ['deploy-acceptance']
        - get: repo
          passed: ['deploy-acceptance']
    - task: send-to-cf
      privileged: true
      image: openjdk-node-cf
      config:
        platform: linux
        inputs:
          - name: repo
          - name: frontend-s3
          - name: backend-s3
        outputs:
          - name: deploy
        run:
          path: sh
          args:
            - -exc
            - |
              #!/bin/bash

              set -ex

              cp  backend-s3/wine-inventory-*.jar  ./deploy/backend.jar
              cp ./repo/ci/manifests/production/mainfest-backend.yml ./deploy/manifest-backend.yml

              cp  frontend-s3/frontend-*.zip  ./deploy/frontend.zip
              cp ./repo/ci/manifests/production/mainfest-frontend.yml ./deploy/manifest-frontend.yml
    - in_parallel:
      - put: production
        params:
          inputs:
            - name: deploy
          path: deploy/backend.jar
          manifest: deploy/manifest-backend.yml
      - put: production
        params:
          inputs:
            - name: deploy
          path: deploy/frontend.zip
          manifest: deploy/manifest-frontend.yml