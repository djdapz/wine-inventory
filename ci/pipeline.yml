---
resources:

- name: repo
  type: git
  source:
    uri: ((git-repo))
    private_key: ((github-private-key))

- name: openjdk
  type: docker-image
  source:
    repository: openjdk
    tag: 8

- name: postgres
  type: docker-image
  source:
    repository: postgres

- name: openjdk-node-cf
  type: docker-image
  source:
    repository: djdapz/openjdk-node-cf
    username: ((dockerhub-username))
    password: ((dockerhub-password))

- name: acceptance
  type: cf
  source:
    api: https://api.run.pivotal.io
    username: ((PCF_USERNAME))
    password: ((PCF_PASSWORD))
    organization: dapuzzo
    space: development

- name: version
  type: semver
  source:
    driver: git
    uri: git@github.com:djdapz/wine-inventory.git
    branch: version
    file: version
    private_key: ((github-private-key))

jobs:

- name: run-tests-backend
  public: true
  plan:
  - get: version
  - get: repo
    trigger: true
  - get: openjdk
    params: {save: true}
  - get: postgres
    params: {save: true}
  - task: run-tests
    privileged: true
    config:
      platform: linux
      inputs:
      - name: repo
      - name: postgres
      - name: openjdk
      image_resource:
        type: docker-image
        source:
          repository: amidos/dcind
      run:
        path: sh
        args:
        - -exc
        - |
          set -e
          source /docker-lib.sh

          start_docker

          docker load -i postgres/image
          docker tag "$(cat postgres/image-id)" "$(cat postgres/repository):$(cat postgres/tag)"

          docker load -i openjdk/image
          docker tag "$(cat openjdk/image-id)" "$(cat openjdk/repository):$(cat openjdk/tag)"


          docker images

          docker-compose -f repo/ci/docker-compose.tests.yml run unit-integration-tests

          docker-compose -f repo/ci/docker-compose.tests.yml down
          docker volume rm $(docker volume ls -q)
  - put: version
    params: {bump: patch}

- name: build-and-upload-frontend
  public: true
  plan:
  - get: version
    trigger: true
    passed: ["run-tests-backend"]
  - get: repo
    trigger: true
    passed: ["run-tests-backend"]
  - get: openjdk-node-cf
    params: {save: true}
  - task: build-and-upload
    privileged: true
    image: openjdk-node-cf

    config:
      platform: linux
      inputs:
      - name: repo
      - name: version
      caches:
      - path: repo/frontend/node_modules
      run:
        path: sh
        args:
        - -exc
        - |
          #!/bin/bash

          set -ex

          export BUILD_VERSION=`cat version/number`

          cd repo/frontend
          npm install
          npm run build

          echo " >>>> Zipping Frontend"
          touch build/Staticfile
          cd build
          zip -r ../frontend.zip *
          cd ..
          echo " <<<< Frontend Zipped"

          echo " >>>> Uploading frontend-server.zip to aws"
          /root/bin/aws s3 cp "./frontend.zip" "s3://wine-inventory/app/frontend-${BUILD_VERSION}.zip"
          echo " <<<< Uploaded frontend-server.zip to aws"

      params:
        AWS_ACCESS_KEY_ID: ((AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((AWS_SECRET_ACCESS_KEY))


- name: build-and-upload-backend
  public: true
  plan:
  - get: version
    trigger: true
    passed: ["run-tests-backend"]
  - get: repo
    trigger: true
    passed: ["run-tests-backend"]
  - get: openjdk-node-cf
    params: {save: true}
  - task: build-and-upload
    privileged: true
    image: openjdk-node-cf
    config:
      platform: linux
      inputs:
      - name: repo
      - name: version
      run:
        path: sh
        args:
        - -exc
        - |
          #!/bin/bash

          set -ex

          export BUILD_VERSION=`cat version/number`

          cd repo
          ./gradlew clean assemble -Pversion=$BUILD_VERSION

          ls -lsa build/libs

          echo " >>>> Uploading jar to aws"

          /root/bin/aws s3 cp "build/libs/wine-inventory-${BUILD_VERSION}.jar" "s3://wine-inventory/app/wine-inventory-${BUILD_VERSION}.jar"
          echo " <<<< Uploaded jar to aws"
      params:
        AWS_ACCESS_KEY_ID: ((AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((AWS_SECRET_ACCESS_KEY))

- name: deploy-frontend-acceptance
  plan:
  - get: version
    trigger: true
    passed: ["build-and-upload-backend", "build-and-upload-frontend"]
  - get: repo
    trigger: true
    passed: ["build-and-upload-backend", "build-and-upload-frontend"]
  - get: openjdk-node-cf
    params: {save: true}
  - task: download-zip
    privileged: true
    image: openjdk-node-cf
    config:
      platform: linux
      inputs:
      - name: repo
      - name: version
      outputs:
      - name: deploy
      run:
        path: sh
        args:
        - -exc
        - |
          #!/bin/bash

          export BUILD_VERSION=`cat version/number`

          set -ex

          /root/bin/aws s3 cp  "s3://wine-inventory/app/frontend-${BUILD_VERSION}.zip"  ./deploy/frontend.zip
          cp ./repo/ci/manifests/acceptance/mainfest-frontend.yml ./deploy/manifest.yml
          export BUILD_VERSION=`cat version/number`

      params:
        AWS_ACCESS_KEY_ID: ((AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((AWS_SECRET_ACCESS_KEY))
  - put: acceptance
    params:
      inputs:
      - name: deploy
      path: deploy/frontend.zip
      manifest: deploy/manifest.yml

- name: deploy-backend-acceptance
  plan:
  - get: version
    trigger: true
    passed: ["build-and-upload-backend", "build-and-upload-frontend"]
  - get: repo
    trigger: true
    passed: ["build-and-upload-backend", "build-and-upload-frontend"]
  - get: openjdk-node-cf
    params: {save: true}
  - task: download-jar
    privileged: true
    image: openjdk-node-cf
    config:
      platform: linux
      inputs:
      - name: repo
      - name: version
      outputs:
      - name: deploy
      run:
        path: sh
        args:
        - -exc
        - |
          #!/bin/bash

          export BUILD_VERSION=`cat version/number`

          set -ex

          /root/bin/aws s3 cp  "s3://wine-inventory/app/wine-inventory-${BUILD_VERSION}.jar"  ./deploy/backend.jar
          cp ./repo/ci/manifests/acceptance/mainfest-backend.yml ./deploy/manifest.yml
          export BUILD_VERSION=`cat version/number`

      params:
        AWS_ACCESS_KEY_ID: ((AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((AWS_SECRET_ACCESS_KEY))
  - put: acceptance
    params:
      inputs:
      - name: deploy
      path: deploy/frontend.zip
      manifest: deploy/manifest.yml
